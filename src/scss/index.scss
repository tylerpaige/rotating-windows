@import '~reset-css';
@import '~mathsass';

$colorPairs : (#B95E82, #B95E52), (#54ACC7, #9DB1FC), (#ADA13E, #5EA13E), (#173AFF, #9B3AFF);

@mixin fullbleed() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

* {
  box-sizing: border-box;
}

.container {
  @include fullbleed();
}

.panel {
  @include fullbleed();

  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 5vw;
  overflow: hidden;

  animation-duration: 10s;
  animation-direction: alternate;
  animation-iteration-count: infinite;

  @for $n from 1 through 4 {
    $colorPair : nth($colorPairs, $n);
    $colorA : nth($colorPair, 1);
    $colorB : nth($colorPair, 2);
    $animationName : fade-#{$n};
    &:nth-child(#{$n}) {
      background-color: $colorA;
      animation-name: $animationName;
    }
    @keyframes #{$animationName} {
      from {
        background-color: $colorA;
      }
      to {
        background-color: $colorB;
      }
    }
  }

  /* Transform origins */
  &:nth-child(1),
  &:nth-child(1) .panel__inner {
    transform-origin: top left;
  }
  &:nth-child(2),
  &:nth-child(2) .panel__inner {
    transform-origin: top right;
  }
  &:nth-child(3),
  &:nth-child(3) .panel__inner {
    transform-origin: bottom left;
  }
  &:nth-child(4),
  &:nth-child(4) .panel__inner {
    transform-origin: bottom right;
  }
}

.panel__inner {
  width: 100%;
  max-width: 800px;
  text-align: center;
  font-family: sans-serif;
  font-size: 45px;
}


/*
  Scaling animation
*/
$totalDuration : 10s;
$movementDuration : 1s;

$positions : (0.95, 0.95), (0.05, 0.95), (0.05, 0.05), (0.95, 0.05);
$sequences: (1, 2, 3, 4), (2, 1, 4, 3), (4, 3, 2, 1), (3, 4, 1, 2);

@for $n from 1 through 4 {
  $animationName : scale-#{$n};
  $sequence: nth($sequences, $n);

  .panel:nth-child(#{$n}) {
    animation-duration: $totalDuration;
    animation-name: $animationName;
    animation-timing-function: linear;
    animation-direction: normal;
  }

  @keyframes #{$animationName} {
    @for $s from 1 through 4 {
      $percentage: ($s - 1) * 25%;
      $positionIndex: nth($sequence, $s);
      $scales: nth($positions, $positionIndex);
      $scaleX: nth($scales, 1);
      $scaleY: nth($scales, 2);

      #{$percentage} {
        transform: scale(#{$scaleX}, #{$scaleY});
      }
    }
    $finalStep : nth($sequence, 1);
    $finalScales: nth($positions, $finalStep);
    $finalScaleX : nth($finalScales, 1);
    $finalScaleY : nth($finalScales, 2);
    100% {
      transform: scale(#{$finalScaleX}, #{$finalScaleY});
    }
  }

}